(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{427:function(t,s,e){t.exports=e.p+"assets/img/node_modules.31feb183.jpg"},581:function(t,s,e){"use strict";e.r(s);var n=e(40),a=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"如何使用-docker-部署前端项目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何使用-docker-部署前端项目"}},[t._v("#")]),t._v(" 如何使用 docker 部署前端项目")]),t._v(" "),n("p",[t._v("Docker 变得越来越流行，它可以轻便灵活地隔离环境，进行扩容，运维管理。对于业务开发者而言，随着持续集成的发展，对代码质量及快速迭代的要求也越来越高。")]),t._v(" "),n("p",[t._v("对于前端而言，在 CI 环境中使用也更容易集成开发，测试与部署。比如可以为流水线(Pipeline)设置 Lint/Test/Security/Audit/Deploy/Artifact 等任务，更好地把控项目质量。")]),t._v(" "),n("p",[t._v("现在无论是前端，后端还是运维，都很强调 "),n("code",[t._v("devops")]),t._v(" 的理念，接下来我将会写一系列关于 "),n("code",[t._v("devops")]),t._v(" 在前端中应用的文章。你可以在我的博客 "),n("a",{attrs:{href:"https://github.com/shfshanyue/blog",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/shfshanyue/blog"),n("OutboundLink")],1),t._v(" 中或者我的公众号 【全栈成长之路】中订阅更多文章。")]),t._v(" "),n("p",[t._v("这里将介绍如何使用 Docker 部署前端应用，千里之行，始于足下。始于足下的意思就是，先让它能够跑起来。")]),t._v(" "),n("h2",{attrs:{id:"先让它跑起来"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#先让它跑起来"}},[t._v("#")]),t._v(" 先让它跑起来")]),t._v(" "),n("p",[t._v("首先，简单介绍一下一个典型的前端应用部署流程")]),t._v(" "),n("ol",[n("li",[n("code",[t._v("npm install")]),t._v(", 安装依赖")]),t._v(" "),n("li",[n("code",[t._v("npm run build")]),t._v("，编译，打包，生成静态资源")]),t._v(" "),n("li",[t._v("服务化静态资源，如 nginx")])]),t._v(" "),n("p",[t._v("介绍完部署流程后，简单写一个 Dockerfile")]),t._v(" "),n("div",{staticClass:"language-dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("alpine\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 代表生产环境")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" PROJECT_ENV production\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 许多 package 会根据此环境变量，做出不同的行为")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 另外，在 webpack 中打包也会根据此环境变量做出优化，但是 create-react-app 在打包时会写死该环境变量")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" NODE_ENV production\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /code\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" . /code\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm install && npm run build && npm install "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("g http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXPOSE")]),t._v(" 80\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server ./public "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("p 80\n")])])]),n("p",[t._v("现在这个前端服务已经跑起来了，接下来你可以完成部署的其它阶段了。")]),t._v(" "),n("p",[t._v("一般情况下，以下就成了运维的工作了，不过，拓展自己的知识边界总是没错的。其它阶段介绍如下")]),t._v(" "),n("ul",[n("li",[t._v("使用 "),n("code",[t._v("nginx")]),t._v(" 或者 "),n("code",[t._v("traefik")]),t._v(" 做反向代理。在我内部集群中使用了 "),n("code",[t._v("traefik")]),t._v("，详见 "),n("a",{attrs:{href:"https://github.com/shfshanyue/op-note/blob/master/traefik.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("traefik 简易入门"),n("OutboundLink")],1)]),t._v(" "),n("li",[t._v("使用 "),n("code",[t._v("kubernetes")]),t._v(" 或者 "),n("code",[t._v("docker compose")]),t._v(" 做容器编排。在我内部集群中使用了 "),n("code",[t._v("compose")]),t._v("，详见 "),n("a",{attrs:{href:"https://github.com/shfshanyue/op-note/blob/master/traefik-compose.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker compose 简易入门"),n("OutboundLink")],1)]),t._v(" "),n("li",[t._v("使用 "),n("code",[t._v("gitlab ci")]),t._v("，"),n("code",[t._v("drone ci")]),t._v(" 或者 "),n("code",[t._v("github actions")]),t._v(" 等做 CI/CD 自动部署。在我内部集群中使用了 "),n("code",[t._v("github actions")]),t._v("，详见 "),n("a",{attrs:{href:"https://github.com/shfshanyue/op-note/blob/master/github-action-guide.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("github actions 简易入门"),n("OutboundLink")],1)])]),t._v(" "),n("p",[t._v("这时镜像存在两个问题，导致每次部署时间过长，不利于产品的快速交付，没有快速交付，也就没有敏捷开发 (Agile)")]),t._v(" "),n("ul",[n("li",[t._v("构建镜像时间过长")]),t._v(" "),n("li",[t._v("构建镜像大小过大，多时甚至 1G+")])]),t._v(" "),n("h2",{attrs:{id:"利用镜像缓存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#利用镜像缓存"}},[t._v("#")]),t._v(" 利用镜像缓存")]),t._v(" "),n("p",[t._v("我们注意到，相对于项目的源文件来讲，"),n("code",[t._v("package.json")]),t._v(" 是相对稳定的。如果没有新的安装包需要下载，则再次构建镜像时，无需重新构建依赖。则可以在 npm install 上节省一半的时间。")]),t._v(" "),n("p",[t._v("对于 "),n("code",[t._v("ADD")]),t._v(" 来讲，如果需要添加的文件内容的 "),n("code",[t._v("checksum")]),t._v(" 没有发生变化，则可以利用缓存。把 "),n("code",[t._v("package.json/package-lock.json")]),t._v(" 与源文件分隔开写入镜像是一个很好的选择。目前，如果没有新的安装包更新的话，可以节省一半时间")]),t._v(" "),n("div",{staticClass:"language-dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("alpine\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" PROJECT_ENV production\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" NODE_ENV production\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# http-server 不变动也可以利用缓存")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm install "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("g http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /code\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 首次添加此两个文件，充分利用缓存")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" package.json package"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("lock.json /code\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm install "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("production\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" . /code\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm run build\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXPOSE")]),t._v(" 80\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server ./public "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("p 80\n")])])]),n("p",[t._v("关于利用缓存有更多细节，需要特别注意一下。如 "),n("code",[t._v("RUN git clone <repo>")]),t._v("，如果命令字符串没有更新，则将使用缓存，当命令是非幂等性时，这将有可能导致问题。")]),t._v(" "),n("blockquote",[n("p",[t._v("关于缓存及可能导致的问题，可以参考我的文章 "),n("a",{attrs:{href:"https://shanyue.tech/op/dockerfile-practice.html#%E5%85%85%E5%88%86%E5%88%A9%E7%94%A8%E6%9E%84%E5%BB%BA%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dockerfile 最佳实践"),n("OutboundLink")],1)])]),t._v(" "),n("h2",{attrs:{id:"ci-环境下的优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ci-环境下的优化"}},[t._v("#")]),t._v(" CI 环境下的优化")]),t._v(" "),n("div",{staticClass:"language-dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("alpine\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" PROJECT_ENV production\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" NODE_ENV production\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# http-server 不变动也可以利用缓存")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm install "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("g http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /code\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 首次添加此两个文件，充分利用缓存")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" package.json package"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("lock.json /code\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm ci\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" . /code\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm run build\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXPOSE")]),t._v(" 80\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server ./public "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("p 80\n")])])]),n("p",[t._v("在 CI 环境下主要做了一点改动：使用 "),n("code",[t._v("npm ci")]),t._v(" 代替 "),n("code",[t._v("npm i")]),t._v("，经实验，"),n("code",[t._v("npm ci")]),t._v(" 可以减少将近一半的的依赖安装时间。")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\nadded "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1154")]),t._v(" packages "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" 60s\n\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" ci\nadded "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1154")]),t._v(" packages "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" 35s\n")])])]),n("p",[t._v("另外，当 "),n("code",[t._v("package.json")]),t._v(" 与 "),n("code",[t._v("package-lock.json")]),t._v(" 版本不匹配时，"),n("code",[t._v("npm ci")]),t._v(" 将会报出异常，提前检测出不安全信息，及早发现问题，及早解决问题。")]),t._v(" "),n("p",[t._v("关于安装依赖速度的优化，可以参考我以前的文章 "),n("a",{attrs:{href:"https://shanyue.tech/frontend-engineering/npm-install.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端高级进阶：在生产环境中使你的 npm i 速度提升 50%"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"多阶段构建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多阶段构建"}},[t._v("#")]),t._v(" 多阶段构建")]),t._v(" "),n("p",[t._v("得益于缓存，现在镜像构建时间已经快了不少。但是，此时镜像的体积依旧过于庞大，这也将会导致部署时间的加长。原因如下")]),t._v(" "),n("p",[t._v("考虑下每次 CI/CD 部署的流程")]),t._v(" "),n("ol",[n("li",[t._v("在构建服务器 (Runer) 构建镜像")]),t._v(" "),n("li",[t._v("把镜像推至镜像仓库服务器")]),t._v(" "),n("li",[t._v("在生产服务器拉取镜像，启动容器")])]),t._v(" "),n("p",[t._v("显而易见，镜像体积过大会在前两步上传及下载时造成传输效率低下，增加每次部署的延时。")]),t._v(" "),n("p",[t._v("即使，构建服务器与生产服务器在同一节点下，没有延时的问题 (基本没可能)。减少镜像体积也能够节省磁盘空间。")]),t._v(" "),n("p",[t._v("关于镜像体积的过大，完全是因为node_modules 臭名昭著的体积:")]),t._v(" "),n("p",[n("img",{attrs:{src:e(427),alt:"node_modules的体积"}})]),t._v(" "),n("p",[t._v("但最后我们只需要构建生成的静态资源，对于源文件以及 "),n("code",[t._v("node_modules")]),t._v(" 下文件，占用体积过大且不必要，造成浪费。")]),t._v(" "),n("p",[t._v("此时可以利用 Docker 的多阶段构建，仅来提取编译后文件，即打包生成的静态资源，对 Dockerfile 做一改进")]),t._v(" "),n("div",{staticClass:"language-docker extra-class"},[n("pre",{pre:!0,attrs:{class:"language-docker"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("alpine as builder\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" PROJECT_ENV production\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" NODE_ENV production\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# http-server 不变动也可以利用缓存")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /code\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" package.json package"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("lock.json /code\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm ci\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" . /code\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm run build\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 选择更小体积的基础镜像")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" nginx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("alpine\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("from=builder /code/public /usr/share/nginx/html\n")])])]),n("p",[t._v("此时，镜像体积从 1G+ 变成了 50M+。若此时的部署仅仅是在测试环境或者多分支环境下为了方便测试，那就大功告成，完美解决问题了。")]),t._v(" "),n("h2",{attrs:{id:"使用对象存储服务-oss"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用对象存储服务-oss"}},[t._v("#")]),t._v(" 使用对象存储服务 (OSS)")]),t._v(" "),n("p",[t._v("分析一下 50M+ 的镜像体积，"),n("code",[t._v("nginx:10-alpine")]),t._v(" 的镜像是16M，剩下的40M是静态资源。生产环境的静态资源往往会在独立域名上维护，并使用 CDN 进行加速。")]),t._v(" "),n("p",[n("strong",[t._v("如果把静态资源给上传到文件存储服务，即OSS，并使用 CDN 对 OSS 进行加速，则没有必要打入镜像了。而在生产环境下也有对静态资源上 CDN 的强烈需求。")])]),t._v(" "),n("p",[t._v("此时镜像大小会控制在 20M 以下。虽然极大地减小了镜像体积，但是它会增加复杂度与增加镜像构建时间(如上传到OSS)，对于测试环境或者分支环境没必要使用 OSS。")]),t._v(" "),n("p",[t._v("关于静态资源，可以分类成两部分：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("/build")]),t._v("，此类文件在项目中使用 require/import 引用，会被 webpack 打包并加 hash 值，并通过 publicPath 修改资源地址。可以把此类文件上传至 oss，并加上永久缓存，不需要打入镜像")]),t._v(" "),n("li",[n("code",[t._v("/static")]),t._v("，此类文件在项目中直接引用根路径，直接打入镜像，如果上传至 OSS 可能增加复杂度 (批量修改 publicPath)")])]),t._v(" "),n("p",[t._v("此时通过一个脚本命令 "),n("code",[t._v("npm run uploadOss")]),t._v("，来把静态资源上传至 OSS。更新后的 Dockerfile 如下")]),t._v(" "),n("div",{staticClass:"language-dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("alpine as builder\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" PROJECT_ENV production\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" NODE_ENV production\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# http-server 不变动也可以利用缓存")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /code\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" package.json package"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("lock.json /code\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm ci\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" . /code\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# npm run uploadOss 是把静态资源上传至 oss 上的脚本文件")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm run build && npm run uploadOss\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 选择更小体积的基础镜像")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" nginx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("alpine\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("from=builder code/public/index.html code/public/favicon.ico /usr/share/nginx/html/\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("from=builder code/public/static /usr/share/nginx/html/static\n")])])]),n("h2",{attrs:{id:"小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),n("p",[t._v("经过本篇文章总结，在前端中构建镜像需要注意以下几点")]),t._v(" "),n("ol",[n("li",[t._v("镜像中使用基于 "),n("code",[t._v("alpine")]),t._v(" 的镜像，减小镜像体积。")]),t._v(" "),n("li",[t._v("镜像中需要锁定 "),n("code",[t._v("node")]),t._v(" 的版本号，尽可能也锁定 "),n("code",[t._v("alpine")]),t._v(" 的版本号，如 "),n("code",[t._v("node:10.19-alpine3.11")]),t._v("。(我示例代码中未如此详细地指出)")]),t._v(" "),n("li",[t._v("选择合适的环境变量 "),n("code",[t._v("NODE_ENV")]),t._v(" 及 "),n("code",[t._v("PROJECT_ENV")]),t._v("，如在测试环境下进行构建")]),t._v(" "),n("li",[t._v("npm ci 替代 npm i，避免版本问题及提高依赖安装速度")]),t._v(" "),n("li",[t._v("package.json 单独添加，充分利用镜像缓存")]),t._v(" "),n("li",[t._v("使用多阶段构建，减小镜像体积")]),t._v(" "),n("li",[t._v("如有必要，静态资源请上 CDN")])])])}),[],!1,null,null,null);s.default=a.exports}}]);