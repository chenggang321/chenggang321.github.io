(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{556:function(t,s,e){"use strict";e.r(s);var a=e(40),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"是谁改了我的代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#是谁改了我的代码"}},[t._v("#")]),t._v(" 是谁改了我的代码")]),t._v(" "),e("p",[t._v("前些月，写了一个关于 git 的表格，叫"),e("a",{attrs:{href:"https://shfshanyue.github.io/cheat-sheets/git",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git Cheat Sheet"),e("OutboundLink")],1),t._v("，现分享一些有用的小技巧。另推荐一个非常不错的关于 git 小技巧的项目 "),e("a",{attrs:{href:"https://github.com/git-tips/tips",target:"_blank",rel:"noopener noreferrer"}},[t._v("git-tips"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"是谁动了我的代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#是谁动了我的代码"}},[t._v("#")]),t._v(" 是谁动了我的代码")]),t._v(" "),e("p",[t._v("是谁动了我的代码？")]),t._v(" "),e("p",[t._v("又是谁的 bug 指到了我的头上？")]),t._v(" "),e("p",[t._v("团队合作时，这样的问题相信大家已经家常便饭司空见惯屡见不鲜了。这时候可以祭出杀器 "),e("code",[t._v("blame")]),t._v(": 使用 "),e("code",[t._v("git blame <file>")]),t._v(" 来定位代码的最后一次修改。")]),t._v(" "),e("p",[t._v("但是，此时有一个问题，这只能查看本行代码的上体提交，而无法定位本行代码的提交历史。比如项目合作中某人对全部代码进行了格式化，"),e("code",[t._v("git blame")]),t._v(" 就失去了作用。此时，可以与另一个有用的命令 "),e("code",[t._v("git log -p <file>")]),t._v(" 结合使用，可以查看文件的更改历史与明细，最终找到这个锅究竟应该由谁来背。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" blame -L "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10,12")]),t._v(" package.json\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log -p -L "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10,12")]),t._v(":package.json\n")])])]),e("h2",{attrs:{id:"快速切换合并分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快速切换合并分支"}},[t._v("#")]),t._v(" 快速切换合并分支")]),t._v(" "),e("p",[t._v("当你经常工作于 A 与 B 两个分支，需要来回切。这时命令应该是 "),e("code",[t._v("git checkout A")]),t._v("，但这里有一个更简单的命令，"),e("code",[t._v("git checkout -")]),t._v("，表示切到最近的一次分支。如果你需要把 B 分支的内容合并过来，可以使用 "),e("code",[t._v("git merge -")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge -\n")])])]),e("p",[t._v("而 "),e("code",[t._v("-")]),t._v(" 往往代表最近一次，如 "),e("code",[t._v("cd -")]),t._v(" 代表进入最近目录，也相当实用。")]),t._v(" "),e("h2",{attrs:{id:"统计项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#统计项目"}},[t._v("#")]),t._v(" 统计项目")]),t._v(" "),e("p",[t._v("统计项目各个成员 commit 的情况，比如你可以查看你自己的项目的 commit 数以及他人对你项目的贡献数")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" shortlog -sn\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" shortlog -sn --no-merges      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不包含 merge commit")]),t._v("\n")])])]),e("h2",{attrs:{id:"快速定位提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快速定位提交"}},[t._v("#")]),t._v(" 快速定位提交")]),t._v(" "),e("p",[t._v("如果你的 commit message 比较规范，比如会关联 issuse 或者当前任务或者 bug 的编号，此时根据 commit message 快速定位： "),e("code",[t._v('git log --grep "Add"')]),t._v("。")]),t._v(" "),e("p",[t._v("如果你的 commit message 不太规范，只记得改了哪几行代码，此时也可以根据每次提交的信息查找关键字，是 "),e("code",[t._v('git log -S "setTimeout"')]),t._v("。")]),t._v(" "),e("p",[t._v("同时，也可以根据作者，时间来辅助快速定位。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --since"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0 am"')]),t._v(" 　　　     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看今日的提交")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --author"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"shfshanyue"')]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 shfshanyue 的提交")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --grep"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#12"')]),t._v("              "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查找提交信息中包含关键字的提交")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log -S "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"setTimeout"')]),t._v("           "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看提交内容中包含关键字的提交")]),t._v("\n")])])]),e("h2",{attrs:{id:"快速定位字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快速定位字符串"}},[t._v("#")]),t._v(" 快速定位字符串")]),t._v(" "),e("p",[t._v("如何查找包换关键字的全部文件？")]),t._v(" "),e("p",[t._v("使用 "),e("code",[t._v("VS Code")]),t._v(" 可以全局搜索，使用 "),e("code",[t._v("grep")]),t._v(" 也可以通过 "),e("code",[t._v("grep -rn <keyword>")]),t._v(" 来全局搜索。")]),t._v(" "),e("p",[t._v("不过，它们也会连带搜索忽略文件，比如前端著名的两个文件夹 "),e("code",[t._v("node_modules")]),t._v(" 和 "),e("code",[t._v("public(dist/build)")]),t._v("。虽然 grep 可以指定 "),e("code",[t._v("--exclude")]),t._v(" 来忽略文件，不过 "),e("code",[t._v("git")]),t._v(" 来的更方便一些。")]),t._v(" "),e("p",[t._v("这时，可以使用 "),e("code",[t._v("git grep <keyword>")]),t._v(" 来解决这个问题，另外 ag 也可以解决这个问题。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" -rn "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("keyword"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" -rn "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("keyword"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" --exclude config.js --exclude-dir node_modules\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("keyword"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("keyword"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);