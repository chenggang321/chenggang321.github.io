(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{563:function(t,a,s){"use strict";s.r(a);var n=s(40),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"由-graphql-来思考-api-design"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#由-graphql-来思考-api-design"}},[t._v("#")]),t._v(" 由 GraphQL 来思考 API Design")]),t._v(" "),s("p",[t._v("目前我已经写了一年多 QraphQL，也时常思考和 Rest API 的不同，以及对 API Design 的启发。")]),t._v(" "),s("blockquote",[s("p",[t._v("他山之石可以攻玉。")])]),t._v(" "),s("p",[t._v("GraphQL 一些天然的设计或者思想对写 Rest API 有很大的借鉴或参考意义。")]),t._v(" "),s("p",[t._v("这里总结下一些受启发的 API 设计规范。")]),t._v(" "),s("p",[t._v("如果你对 GraphQL 不熟悉，可以先通读 "),s("a",{attrs:{href:"http://graphql.cn/learn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GraphQL 中文文档"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"对所有的资源返回-id"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对所有的资源返回-id"}},[t._v("#")]),t._v(" 对所有的资源返回 id")]),t._v(" "),s("p",[t._v("在 graphql 中，scalar 类型 "),s("code",[t._v("ID")]),t._v(" 用来表示资源的全局唯一性。在 "),s("code",[t._v("apollo-client")]),t._v(" 中也建议客户端每次请求都把 id 带上。")]),t._v(" "),s("p",[t._v("在响应中带上 id 至少有两个好处")]),t._v(" "),s("ol",[s("li",[t._v("客户端对资源的缓存")]),t._v(" "),s("li",[t._v("在数据上游至客户端的整个链路中有利于数据的溯源")])]),t._v(" "),s("h2",{attrs:{id:"按需加载资源的字段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按需加载资源的字段"}},[t._v("#")]),t._v(" 按需加载资源的字段")]),t._v(" "),s("div",{staticClass:"language-graphql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-graphql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("query")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TODO")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  todo "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    id \n    name\n    status\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("如客户端只需要显示某个 TODO 的状态以及名称，则只需要返回 name 以及 status 字段，大大减少了网络的流量。")]),t._v(" "),s("p",[t._v("另外， "),s("strong",[t._v("graphql server 需要在数据库层面也对字段做按需加载。否则，graphql server 与 database 之间也会造成无用的数据 IO 与流量浪费。")])]),t._v(" "),s("blockquote",[s("p",[t._v("获取 graphql query 所请求的字段，需要手动解析 GraphQLFieldResolveFn 函数的第四个字段 info，并在每一个 field 上自定义一个 directive 标注 Graphql Filed 与 Database Field 的关系")])]),t._v(" "),s("p",[t._v("在 Rest API 中可以使用额外字段做按需加载。 "),s("strong",[t._v("如使用 fields 标记返回需要的字段，若无此字段，默认返回资源的全部字段，在中间件中对 fields 做结构化处理")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 请求 Todo:10，并且只需要 id,name,status 三个字符安")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/api/todos/10?fields=id,name,status'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 请求 Todo:10 全部资源")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/api/todos/10'")]),t._v("\n")])])]),s("h2",{attrs:{id:"关联资源使用嵌套对象表示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关联资源使用嵌套对象表示"}},[t._v("#")]),t._v(" 关联资源使用嵌套对象表示")]),t._v(" "),s("p",[t._v("这个请求表示一个用户列表，每个用户需要展示最后一个 Todo 的名称。Todo 需要使用嵌套对象来表示。")]),t._v(" "),s("div",{staticClass:"language-graphql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-graphql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("query")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("USERS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  users "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    id\n    name\n    lastTodo "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      id\n      name\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("在 Rest API 设计中经常见到所有数据进行了展开，不仅无法定位资源，也不好扩展数据。嵌套数据可以很灵活的扩展数据，另外也可以对嵌套数据进行按需加载")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res0 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  users"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"山月"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    todoName"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"学习"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修改后")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" todoFields "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  users"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"山月"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    todo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"学习"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("fields\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以这样设计 API")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" api "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/api/users?fields=id,name,todo.id,todo.name'")]),t._v("\n")])])]),s("h2",{attrs:{id:"使用-isostring-表示时间戳"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-isostring-表示时间戳"}},[t._v("#")]),t._v(" 使用 ISOString 表示时间戳")]),t._v(" "),s("p",[t._v("在 graphql 中，虽没有一个 scalar 类型来表示时间戳，不过可以自定义 scalar DateTime 来表示时间。关于时间的格式")]),t._v(" "),s("blockquote",[s("p",[t._v("参考 StackOverflow 上的问题 "),s("a",{attrs:{href:"https://stackoverflow.com/questions/10286204/the-right-json-date-format",target:"_blank",rel:"noopener noreferrer"}},[t._v("the-right-json-date-format"),s("OutboundLink")],1)])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" date "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从 toJSON 的输出就知道前后端交互需要使用什么格式了")]),t._v("\ndate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toJSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2019-03-14T07:41:08.500Z")]),t._v("\ndate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toISOString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2019-03-14T07:41:08.500Z")]),t._v("\n")])])]),s("p",[t._v("这样返回的格式不仅符合规范，而且可读性也比较好。")]),t._v(" "),s("p",[t._v("我见过API中返回的时间戳表示为 unix timestamp，js timestamp, iso8601 三种格式，较为混乱。统一的数据格式有利于前后端的联调，不过这也得益于 graphql 的强类型 schema。")]),t._v(" "),s("h2",{attrs:{id:"结构化的错误信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构化的错误信息"}},[t._v("#")]),t._v(" 结构化的错误信息")]),t._v(" "),s("p",[t._v("在 graphql 中会返回 "),s("code",[t._v("{ data, errors }")]),t._v(" 的数据结构，可以在最后结构化错误信息为")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"code"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"InvalidToken"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"message"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Token 失效"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"httpStatus"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("401")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("message")]),t._v(" 为可读性的错误信息，可以由前端直接显示，"),s("code",[t._v("code")]),t._v(" 为调试用，"),s("code",[t._v("httpStatus")]),t._v(" 由下一步的中间件捕捉，设置状态码。")]),t._v(" "),s("blockquote",[s("p",[t._v("在结构化错误信息后，可以顺带把错误信息发送到报警系统 (如 Sentry)。不过需要分清 WARN 与 ERROR，如 401，403 应当做 WARN 处理。")])]),t._v(" "),s("h2",{attrs:{id:"符合标准的-http-status"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#符合标准的-http-status"}},[t._v("#")]),t._v(" 符合标准的 http status")]),t._v(" "),s("p",[t._v("恩，好吧。graphql 这条有缺陷。graphql 的 "),s("code",[t._v("Query")]),t._v(" 与 "),s("code",[t._v("Mutation")]),t._v(" 都是使用 "),s("code",[t._v("POST")]),t._v(" 请求。对不同的执行成功的 "),s("code",[t._v("Mutation")]),t._v(" 返回不同的 200，201，202 还是比较麻烦。")]),t._v(" "),s("p",[t._v("不过对于错误返回不同的状态码， "),s("strong",[t._v("打开 devtool 一眼可以看到红色的 4XX 信息，也对快速定位错误请求有帮助，稍微减少了些烦躁心。")])]),t._v(" "),s("p",[t._v("介绍几种常见的4xx状态码")]),t._v(" "),s("ul",[s("li",[t._v("401 Unauthorized: 用户未登录请求需要登录才能请求的资源")]),t._v(" "),s("li",[t._v("403 Forbidden: 用户A登录了，但他却想请求 B 的资源")]),t._v(" "),s("li",[t._v("400 Bad Request: 恩，我把所有找不到状态码的错误都放到了 400")])]),t._v(" "),s("blockquote",[s("p",[t._v("关于400参考 "),s("a",{attrs:{href:"https://stackoverflow.com/questions/19671317/400-bad-request-http-error-code-meaning",target:"_blank",rel:"noopener noreferrer"}},[t._v("400 BAD request HTTP error code meaning?"),s("OutboundLink")],1),t._v("\n这里有一篇文章，"),s("a",{attrs:{href:"https://www.codetinkerer.com/2015/12/04/choosing-an-http-status-code.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于4xx状态码的选择"),s("OutboundLink")],1),t._v("，取一张图出来")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://www.codetinkerer.com/assets/choosing-an-http-status-code/http-4xx-status-codes.png",alt:"如何选择http错误状态码"}})]),t._v(" "),s("h2",{attrs:{id:"请求及响应数据校验"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求及响应数据校验"}},[t._v("#")]),t._v(" 请求及响应数据校验")]),t._v(" "),s("p",[t._v("由于 graphql 的强类型 schema，也省了数据输入输出的校验。")]),t._v(" "),s("p",[t._v("对于 Rest API，可以使用 JSON Schema 来校验数据格式。node 也可以使用 "),s("a",{attrs:{href:"https://github.com/hapijs/joi",target:"_blank",rel:"noopener noreferrer"}},[t._v("joi"),s("OutboundLink")],1),t._v(" 做数据校验。")]),t._v(" "),s("blockquote",[s("p",[t._v("这里放一份 JSON Schema 的文档：http://json-schema.org/")])]),t._v(" "),s("h2",{attrs:{id:"注释文档化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注释文档化"}},[t._v("#")]),t._v(" 注释文档化")]),t._v(" "),s("p",[t._v("得益于 graphql 的 introspection 与强类型的 schema。graphql 可以根据源码以及注释自动生成文档，直接使用 graphiql 或者 graphql playground 上查看。")]),t._v(" "),s("p",[t._v("如果你使用 node.js 来写服务器应用，可以使用 "),s("a",{attrs:{href:"https://github.com/apidoc/apidoc",target:"_blank",rel:"noopener noreferrer"}},[t._v("apiDoc"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("另外，注意不要把文档暴露到生产环境，graphql 需要在生产环境中关掉 introspection。")])])}),[],!1,null,null,null);a.default=e.exports}}]);