(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{432:function(s,e,a){s.exports=a.p+"assets/img/npm.6f7aeee8.svg"},433:function(s,e,a){s.exports=a.p+"assets/img/npm-i.40ddba95.png"},587:function(s,e,a){"use strict";a.r(e);var t=a(40),n=Object(t.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"在生产环境中使你的-npm-i-速度提升-50"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在生产环境中使你的-npm-i-速度提升-50"}},[s._v("#")]),s._v(" 在生产环境中使你的 npm i 速度提升 50%")]),s._v(" "),t("p",[t("img",{attrs:{src:a(432),alt:""}})]),s._v(" "),t("p",[s._v("对于一个前端应用，或者说是一个 Node 应用，在 CICD pipeline 中，无论是构建，测试，部署，其中必不可少的环节就是依赖安装: "),t("code",[s._v("npm i")]),s._v("。")]),s._v(" "),t("p",[t("code",[s._v("npm i")]),s._v(" 不仅是必不可少的环节，而且很可能也是耗时最长的一个环节。")]),s._v(" "),t("p",[s._v("打蛇打七寸，优化应该从瓶颈处开始，如果能从依赖安装下手，将能极大地缩短部署时间，提高产品交付效率，改善 DevOps 流程，从而促进敏捷开发。")]),s._v(" "),t("p",[s._v("CI 环境中的优化不同于本地开发环境，其中最大的不同在于: 在本地环境中安装依赖是有状态的，如 "),t("code",[s._v("node_modules")]),s._v("，"),t("code",[s._v("~/.npmrc")]),s._v("，"),t("code",[s._v("~/.npm")]),s._v(" 一系列硬盘目录及文件，无不构成状态。而在生产环境中，往往结合 "),t("code",[s._v("CICD")]),s._v(" 工具，每次分配的 "),t("code",[s._v("Runner")]),s._v(" 不一定是一台服务器(容器)，往往被视为无状态，因而无法有效利用缓存而导致 CI 中部署用时过长。")]),s._v(" "),t("p",[s._v("但也正因为 CICD Runner 的无状态化，这意味着你只要参考构建脚本，如 "),t("code",[s._v(".gitlab-ci.yaml")]),s._v("，"),t("code",[s._v(".travis.yaml")]),s._v(" 或者 "),t("code",[s._v(".github/workflows/deploy.yaml")]),s._v("，就可以从零把项目跑起来，而避免过多在熟悉新项目时求助他人。")]),s._v(" "),t("p",[s._v("不同的部署方式，不同的持续集成工具有不同的实践方法，但优化的原理大同小异。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(433),alt:""}})]),s._v(" "),t("blockquote",[t("p",[s._v("如果嫌文章太长，直接直接拉到最下方看总结")])]),s._v(" "),t("h2",{attrs:{id:"只安装有必要的库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#只安装有必要的库"}},[s._v("#")]),s._v(" 只安装有必要的库")]),s._v(" "),t("p",[t("code",[s._v("npm install")]),s._v(" 的速度显然与它依赖的包的多少是正相关的，那减少包的数量就可以减少装包所花费的时间。这个道题如同每天都少吃一顿饭就会变瘦一样简单。")]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("--production")]),s._v(" 可以只安装 "),t("code",[s._v("package.json")]),s._v(" 中 "),t("code",[s._v("dependencies")]),s._v(" 中的依赖项，只把要安装在 CI 中需要使用到的依赖。在生产环境部署时可以指定 "),t("code",[s._v("--production")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" --production\n")])])]),t("p",[s._v("另外，通过设置环境变量 "),t("code",[s._v("NODE_ENV=production")]),s._v(" 相当于指定 "),t("code",[s._v("--production")]),s._v("，测试如下:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("NODE_ENV")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("production "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" config get production\n"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n")])])]),t("p",[t("strong",[s._v("这最大的不足就是需要你谨小慎微战战兢兢，如临深渊如履薄冰地把 "),t("code",[s._v("packages")]),s._v(" 分拣到 "),t("code",[s._v("devDependencies")]),s._v(" 与 "),t("code",[s._v("dependencies")]),s._v(" 中。")])]),s._v(" "),t("h2",{attrs:{id:"使用私有镜像仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用私有镜像仓库"}},[s._v("#")]),s._v(" 使用私有镜像仓库")]),s._v(" "),t("p",[s._v("从 "),t("code",[s._v("npm")]),s._v(" 的官方仓库可以发布与拉取 "),t("code",[s._v("package")]),s._v("，比如 "),t("code",[s._v("react")]),s._v("，"),t("code",[s._v("vue")]),s._v(" 和 "),t("code",[s._v("express")]),s._v(" 都发布在官方仓库中。官方 "),t("code",[s._v("registory")]),s._v(" 地址是 "),t("code",[s._v("https://registry.npmjs.org/")]),s._v("，这对国内的前端应用来说，由于远在国外，远程仓库的服务器时延过大，此时的瓶颈在于网络。")]),s._v(" "),t("p",[s._v("国内的公有镜像库是一个不错的选择，如淘宝镜像，它每隔十分钟与官方镜像仓库同步一次，而它位于国内，网络不至于太慢。")]),s._v(" "),t("p",[t("strong",[s._v("对于企业级项目的生产环境来说，在集群内部搭建私有仓库是一个更好的选择，也更能缩短时延。")]),s._v(" 流量能在局域网完成的，就不需要去互联网中溜圈了。")]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("npm config")]),s._v(" 来设置 npm 仓库，它将把仓库信息写入 "),t("code",[s._v("~/.npmrc")]),s._v(" 中，这足以适用于 "),t("code",[s._v("CICD")]),s._v(" 中。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" config "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" registry https://registry-npm.shanyue.tech/\n")])])]),t("h2",{attrs:{id:"缓存-人不能两次踏进同一条河流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存-人不能两次踏进同一条河流"}},[s._v("#")]),s._v(" 缓存：人不能两次踏进同一条河流")]),s._v(" "),t("p",[s._v("人不能踏进同一条河流两次，一个接口不能连续慢两次，npm install 同样不能慢两次。")]),s._v(" "),t("p",[s._v("正如 http cache 一样，"),t("code",[s._v("npm install")]),s._v(" 也可以充分利用缓存，npm 的缓存在 linux 系统中存在于以下路径:")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("~/.npm")])])]),s._v(" "),t("p",[s._v("命令 "),t("code",[s._v("npm cache verify")]),s._v(" 可以校验缓存，如下所示:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" cache verify\nCache verified and compressed "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("~/.npm/_cacache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\nContent verified: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4415")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("156612117")]),s._v(" bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nIndex entries: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6239")]),s._v("\nFinished "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(".017s\n")])])]),t("p",[s._v("结合 "),t("code",[s._v("npm install --prefer-offline")]),s._v(" 缓存优先策略充分利用缓存")]),s._v(" "),t("p",[s._v("但是有一个悖论，在 CI 中是无状态的: 你本次装的 "),t("code",[s._v("node_modules")]),s._v(" 和生成的 "),t("code",[s._v("~/.npm")]),s._v(" 将会在下次装包时丢失。")]),s._v(" "),t("p",[s._v("这时候就需要利用 CI 的缓存功能，如以下是 "),t("code",[s._v("travis ci")]),s._v(" 的配置")]),s._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("install")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" npm ci\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# keep the npm cache around to speed up installs")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("cache")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("directories")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$HOME/.npm"')]),s._v("\n")])])]),t("h2",{attrs:{id:"progress-屏蔽非必要打印信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#progress-屏蔽非必要打印信息"}},[s._v("#")]),s._v(" progress: 屏蔽非必要打印信息")]),s._v(" "),t("p",[s._v("当设置 "),t("code",[s._v("progress")]),s._v(" 为 true 时，"),t("code",[s._v("npm install")]),s._v(" 时将会显示进度条，把它设置为 false 可小幅提高 "),t("code",[s._v("npm install")]),s._v(" 的速度。")]),s._v(" "),t("p",[s._v("修改设置:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("progress")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("false\n")])])]),t("p",[s._v("在 "),t("a",{attrs:{href:"https://docs.npmjs.com/using-npm/config#progress",target:"_blank",rel:"noopener noreferrer"}},[s._v("官方文档"),t("OutboundLink")],1),s._v(" 中对 "),t("code",[s._v("progress")]),s._v(" 有以下介绍：")]),s._v(" "),t("blockquote",[t("p",[s._v("Default: true, unless TRAVIS or CI env vars set.\nType: Boolean")])]),s._v(" "),t("p",[s._v("因此，只需要在构建服务器中简单设置一个 "),t("code",[s._v("CI=true")]),s._v(" 的环境变量即可以很轻便地解决问题")]),s._v(" "),t("h2",{attrs:{id:"使用-npm-ci-替代-npm-i"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-npm-ci-替代-npm-i"}},[s._v("#")]),s._v(" 使用 npm ci 替代 npm i")]),s._v(" "),t("p",[s._v("单看名字，里边有个 "),t("code",[s._v("CI")]),s._v("，它就像适用在 CI 中，事实也如此。它在 CI 环境中做了一系列优化，如去除掉一些面向用户的特性来加强速度。除了性能，它也有一些在 CI 上基于完整性与安全性的检查，如 "),t("code",[s._v("package.json")]),s._v(" 与 "),t("code",[s._v("package-lock.json")]),s._v(" 版本不一致的问题。")]),s._v(" "),t("p",[s._v("为了更好地提高速度，"),t("code",[s._v("npm ci")]),s._v(" 基于一个独立的库 "),t("a",{attrs:{href:"https://github.com/npm/libcipm",target:"_blank",rel:"noopener noreferrer"}},[s._v("libcipm"),t("OutboundLink")],1),s._v(" 安装依赖，而它拥有和 "),t("code",[s._v("npm install")]),s._v(" 兼容的 API。并且当它安装依赖时，默认是缓存优先的，它会充分利用缓存，从而加速装包。")]),s._v(" "),t("p",[s._v("经实验，"),t("code",[s._v("npm ci")]),s._v(" 可以减少将近一半的的依赖安装时间。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v("\nadded "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1154")]),s._v(" packages "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" 60s\n\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" ci\nadded "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1154")]),s._v(" packages "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" 35s\n")])])]),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("最后总结一下如何减少 npm install 的时间，都是很简单的设置，一分钟搞定")]),s._v(" "),t("ol",[t("li",[s._v("选择时延低的 "),t("code",[s._v("registry")]),s._v("，需要企业技术基础建设支持")]),s._v(" "),t("li",[t("code",[s._v("NODE_ENV=production")]),s._v("，只安装生产环境必要的包(如果 dep 与 devDep 没有仔细分割开来，工作量很大，可以放弃)")]),s._v(" "),t("li",[t("code",[s._v("CI=true")]),s._v("，npm 会在此环境变量下自动优化")]),s._v(" "),t("li",[s._v("结合 CI 的缓存功能，充分利用 "),t("code",[s._v("npm cache")])]),s._v(" "),t("li",[s._v("使用 "),t("code",[s._v("npm ci")]),s._v(" 代替 "),t("code",[s._v("npm i")]),s._v("，既提升速度又保障应用安全性")])])])}),[],!1,null,null,null);e.default=n.exports}}]);