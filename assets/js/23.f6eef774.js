(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{434:function(t,s,a){t.exports=a.p+"assets/img/ast.07c8823c.png"},435:function(t,s,a){t.exports=a.p+"assets/img/ast.944bb95b.jpg"},588:function(t,s,a){"use strict";a.r(s);var n=a(40),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"javascript-代码是如何被压缩的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript-代码是如何被压缩的"}},[t._v("#")]),t._v(" javascript 代码是如何被压缩的")]),t._v(" "),n("p",[t._v("随着前端的发展，特别是 "),n("code",[t._v("React")]),t._v("，"),n("code",[t._v("Vue")]),t._v(" 等构造单页应用的兴起，前端的能力得以很大提升，随之而来的是项目的复杂度越来越大。此时的前端的静态资源也越来越庞大，而毫无疑问 "),n("code",[t._v("javascript")]),t._v(" 资源已是前端的主体资源，对于压缩它的体积至为重要。")]),t._v(" "),n("p",[t._v("为什么说更小的体积很重要呢：更小的体积对于用户体验来说意味着更快的加载速度以及更好的用户体验，这也能早就企业更大的利润。另外，更小的体积对于服务器来说也意味更小的带宽以及更少的服务器费用。")]),t._v(" "),n("p",[t._v("前端构建编译代码时，可以使用 "),n("code",[t._v("webpack")]),t._v(" 中的 "),n("code",[t._v("optimization.minimizer")]),t._v(" 来对代码进行压缩优化。但是我们也需要了解如何它是压缩代码的，这样当在生产环境的控制台调试代码时对它也有更深刻的理解。")]),t._v(" "),n("h2",{attrs:{id:"如何查看资源的体积"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何查看资源的体积"}},[t._v("#")]),t._v(" 如何查看资源的体积")]),t._v(" "),n("p",[t._v("对于我们所编写的代码，它在操作系统中是一个文件，根据文件系统中的 "),n("code",[t._v("stat")]),t._v(" 信息我们可以查看该文件的大小。")]),t._v(" "),n("p",[n("code",[t._v("stat")]),t._v(" 命令用来打印文件系统的信息：")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("stat")]),t._v(" config.js\n  File: ‘config.js’\n  Size: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3663")]),t._v("            Blocks: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("          IO Block: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4096")]),t._v("   regular "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("\nDevice: fd01h/64769d    Inode: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("806060")]),t._v("      Links: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nAccess: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0644/-rw-r--r--"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  Uid: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("/    root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   Gid: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("/    root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nAccess: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v("-02-13 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(":43:54.851381702 +0800\nModify: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v("-02-13 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(":43:52.668417641 +0800\nChange: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v("-02-13 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(":43:52.691417262 +0800\n Birth: -\n\n")])])]),n("p",[n("code",[t._v("stat")]),t._v(" 打印的信息过大，如果只用来衡量体积，可以使用 "),n("code",[t._v("wc -c")])]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("wc")]),t._v(" -c config.js\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3663")]),t._v(" config.js\n")])])]),n("h2",{attrs:{id:"如何压缩代码体积"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何压缩代码体积"}},[t._v("#")]),t._v(" 如何压缩代码体积？")]),t._v(" "),n("p",[t._v("这里介绍几种关于压缩代码体积的几种思路")]),t._v(" "),n("h3",{attrs:{id:"去除多余字符-空格-换行及注释"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#去除多余字符-空格-换行及注释"}},[t._v("#")]),t._v(" 去除多余字符: 空格，换行及注释")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对两个数求和")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("先把一个抽象的问题给具体化，如果是以上一段代码，那如何压缩它的体积呢:")]),t._v(" "),n("p",[t._v("此时文件大小是 "),n("code",[t._v("62 Byte")]),t._v("， "),n("strong",[t._v("一般来说中文会占用更大的空间。")])]),t._v(" "),n("p",[t._v("多余的空白字符会占用大量的体积，如空格，换行符，另外注释也会占用文件体积。当我们把所有的空白符合注释都去掉之后，代码体积会得到减少。")]),t._v(" "),n("p",[n("strong",[t._v("去掉多余字符之后，文件大小已经变为 "),n("code",[t._v("30 Byte")]),t._v("。")]),t._v(" 压缩后代码如下:")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("替换掉多余字符后会有什么问题产生呢？")]),t._v(" "),n("p",[n("strong",[t._v("有，比如多行代码压缩到一行时要注意行尾分号。")]),t._v(" 这就需要通过以下介绍的 AST 来解决。")]),t._v(" "),n("h3",{attrs:{id:"压缩变量名-变量名-函数名及属性名"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#压缩变量名-变量名-函数名及属性名"}},[t._v("#")]),t._v(" 压缩变量名：变量名，函数名及属性名")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("first"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" second")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" first "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" second"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("如以上 "),n("code",[t._v("first")]),t._v(" 与 "),n("code",[t._v("second")]),t._v(" 在函数的作用域中，在作用域外不会引用它，此时可以让它们的变量名称更短。但是如果这是一个 "),n("code",[t._v("module")]),t._v(" 中，"),n("code",[t._v("sum")]),t._v(" 这个函数也不会被导出呢？那可以把这个函数名也缩短。")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 压缩: 缩短变量名")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再压缩: 去除空余字符")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("s")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("在这个示例中，当完成代码压缩 ("),n("code",[t._v("compress")]),t._v(") 时，代码的混淆 ("),n("code",[t._v("mangle")]),t._v(") 也捎带完成。 "),n("strong",[t._v("但此时缩短变量的命名也需要 AST 支持，不至于在作用域中造成命名冲突。")])]),t._v(" "),n("h3",{attrs:{id:"更简单的表达-合并声明以及布尔值简化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#更简单的表达-合并声明以及布尔值简化"}},[t._v("#")]),t._v(" 更简单的表达：合并声明以及布尔值简化")]),t._v(" "),n("p",[t._v("合并声明的示例如下：")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 压缩前")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 压缩后")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("布尔值简化的示例如下：")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 压缩前")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("c "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("d "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("e\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 压缩后")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("c"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("d"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("这个示例更是需要解析 AST 了")]),t._v(" "),n("h2",{attrs:{id:"ast"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ast"}},[t._v("#")]),t._v(" AST")]),t._v(" "),n("p",[n("code",[t._v("AST")]),t._v("，抽象语法树，js 代码解析后的最小词法单元，而这个过程就是通过 Parser 来完成的。")]),t._v(" "),n("p",[t._v("那么 AST 可以做什么呢？")]),t._v(" "),n("ul",[n("li",[t._v("eslint: 校验你的代码风格")]),t._v(" "),n("li",[t._v("babel: 编译代码到 ES 低版本")]),t._v(" "),n("li",[t._v("taro/mpvue: 各种可以多端运行的小程序框架")]),t._v(" "),n("li",[t._v("GraphQL: 解析客户端查询")])]),t._v(" "),n("p",[t._v("我们在日常工作中经常会不经意间与它打交道，如 "),n("code",[t._v("eslint")]),t._v(" 与 "),n("code",[t._v("babel")]),t._v("，都会涉及到 "),n("code",[t._v("js")]),t._v(" 与代码中游走。不同的解析器会生成不同的 AST，司空见惯的是 babel 使用的解析器 "),n("code",[t._v("babylon")]),t._v("，而 "),n("code",[t._v("uglify")]),t._v(" 在代码压缩中使用到的解析器是 "),n("code",[t._v("UglifyJS")]),t._v("。")]),t._v(" "),n("p",[t._v("你可以在 "),n("a",{attrs:{href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("AST Explorer"),n("OutboundLink")],1),t._v(" 中直观感受到，如下图：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(434),alt:""}})]),t._v(" "),n("p",[t._v("那压缩代码的过程：code -> AST -> (transform)一颗更小的AST -> code，这与 "),n("code",[t._v("babel")]),t._v(" 和 "),n("code",[t._v("eslint")]),t._v(" 的流程一模一样。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(435),alt:""}})]),t._v(" "),n("h2",{attrs:{id:"uglifyjs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uglifyjs"}},[t._v("#")]),t._v(" UglifyJS")]),t._v(" "),n("p",[t._v("不要重复造轮子！")]),t._v(" "),n("p",[t._v("于是我找了一个久负盛名的关于代码压缩的库: "),n("a",{attrs:{href:"https://github.com/mishoo/UglifyJS2",target:"_blank",rel:"noopener noreferrer"}},[t._v("UglifyJS3"),n("OutboundLink")],1),t._v("，一个用以代码压缩混淆的库。那它是如何完成一些压缩功能的，比如替换空白符，答案是 AST。")]),t._v(" "),n("p",[n("code",[t._v("webpack")]),t._v(" 中内置的代码压缩插件就是使用了它，它的工作流程大致如下：")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原始代码")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("const a = 3;")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过 UglifyJS 把代码解析为 AST")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ast "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nast"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("figure_out_scope")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转化为一颗更小的 AST 树")]),t._v("\ncompressor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Compressor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nast "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ast"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("transform")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compressor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再把 AST 转化为代码")]),t._v("\ncode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ast"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print_to_string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("而当你真正使用它来压缩代码时，你只需要面向配置编程即可，文档参考 "),n("a",{attrs:{href:"https://github.com/mishoo/UglifyJS2#parse-options",target:"_blank",rel:"noopener noreferrer"}},[t._v("uglify 官方文档"),n("OutboundLink")],1)]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ecma"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  compress"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ecma"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    warnings"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    comparisons"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    inline"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  output"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ecma"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    comments"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    ascii_only"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"在-webpack-中压缩代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在-webpack-中压缩代码"}},[t._v("#")]),t._v(" 在 webpack 中压缩代码")]),t._v(" "),n("p",[t._v("在知道代码压缩是怎么完成的之后，我们终于可以把它搬到生产环境中去压缩代码。终于到了实践的时候了，虽然它只是简单的调用 API 并且调调参数。")]),t._v(" "),n("p",[t._v("一切与性能优化相关的都可以在 "),n("code",[t._v("optimization")]),t._v(" 中找到，"),n("code",[t._v("TerserPlugin")]),t._v(" 是一个底层基于 "),n("code",[t._v("uglifyjs")]),t._v(" 的用来压缩 JS 的插件。")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("optimization"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  minimize"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" isEnvProduction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  minimizer"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TerserPlugin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      terserOptions"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        parse"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          ecma"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        compress"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          ecma"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          warnings"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          comparisons"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          inline"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        output"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          ecma"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          comments"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          ascii_only"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      sourceMap"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);